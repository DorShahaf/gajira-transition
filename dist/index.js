module.exports=function(e,t){"use strict";var s={};function __webpack_require__(t){if(s[t]){return s[t].exports}var n=s[t]={i:t,l:false,exports:{}};var r=true;try{e[t].call(n.exports,n,n.exports,__webpack_require__);r=false}finally{if(r)delete s[t]}n.l=true;return n.exports}__webpack_require__.ab=__dirname+"/";function startup(){return __webpack_require__(168)}return startup()}({161:function(module){module.exports=eval("require")("lodash")},168:function(e,t,s){const n=s(747);const r=s(258);const i=s(441);const o=`${process.env.HOME}/.jira.d/config.yml`;const a=`${process.env.HOME}/jira/config.yml`;const c=s(474);const u=require(process.env.GITHUB_EVENT_PATH);const l=r.parse(n.readFileSync(a,"utf8"));async function exec(){try{const e=await new c({githubEvent:u,argv:parseArgs(),config:l}).execute();if(e){const t=r.stringify(e);const s=Object.assign({},l,e);n.writeFileSync(a,r.stringify(s));return n.appendFileSync(o,t)}console.log("Failed to transition issue.");process.exit(78)}catch(e){console.error(e);process.exit(1)}}function parseArgs(){const e=i.getInput("transition");const t=i.getInput("transitionId");if(!e&&!t){throw new Exception("Error: please specify either a transition or transitionId")}return{issue:i.getInput("issue"),fixVersion:i.getInput("fixVersion"),transition:e,transitionId:t}}exec()},258:function(module){module.exports=eval("require")("yaml")},420:function(e,t,s){const{get:n}=s(161);const r="jira";const{format:i}=s(835);const o=s(837)(r);class Jira{constructor({baseUrl:e,token:t,email:s}){this.baseUrl=e;this.token=t;this.email=s}async getIssue(e,t={}){const{fields:s=[],expand:r=[]}=t;try{return this.fetch("getIssue",{pathname:`/rest/api/2/issue/${e}`,query:{fields:s.join(","),expand:r.join(",")}})}catch(e){if(n(e,"res.status")===404){return}throw e}}async getProjectVersions(e){return this.fetch("getProjectVersions",{pathname:`/rest/api/2/project/${e}/versions`},{method:"GET"})}async createVersion(e,t){return this.fetch("transitionIssue",{pathname:`/rest/api/2/version`},{method:"POST",body:t})}async getIssueTransitions(e){return this.fetch("getIssueTransitions",{pathname:`/rest/api/2/issue/${e}/transitions`},{method:"GET"})}async transitionIssue(e,t){return this.fetch("transitionIssue",{pathname:`/rest/api/3/issue/${e}/transitions`},{method:"POST",body:t})}async fetch(e,{host:t,pathname:s,query:n},{method:a,body:c,headers:u={}}={}){const l=i({host:t||this.baseUrl,pathname:s,query:n});if(!a){a="GET"}if(u["Content-Type"]===undefined){u["Content-Type"]="application/json"}if(u.Authorization===undefined){u.Authorization=`Basic ${Buffer.from(`${this.email}:${this.token}`).toString("base64")}`}if(c&&u["Content-Type"]==="application/json"){c=JSON.stringify(c)}const f={req:{method:a,headers:u,body:c,url:l}};try{await o(f,`${r}:${e}`)}catch(e){const t={originError:e,source:"jira"};delete f.req.headers;throw Object.assign(new Error("Jira API error"),f,t)}return f.res.body}}e.exports=Jira},441:function(module){module.exports=eval("require")("@actions/core")},474:function(e,t,s){const n=s(161);const r=s(420);e.exports=class{constructor({githubEvent:e,argv:t,config:s}){this.Jira=new r({baseUrl:s.baseUrl,token:s.token,email:s.email});this.config=s;this.argv=t;this.githubEvent=e}async execute(){const{argv:e}=this;const t=e.issue;const s=await this.Jira.getIssue(t,{fields:["project.id"]});const r=n.get(s,"fields.project.id");const{versions:i}=await this.Jira.getProjectVersions(r);let o=n.find(i,t=>{if(t.name.toLowerCase()===e.version.toLowerCase())return true});if(!o){o=await this.Jira.createVersion(r,{archived:false,name:e.version,projectId:r,released:false})}console.log(`Selected version:${JSON.stringify(o,null,4)}`);const{transitions:a}=await this.Jira.getIssueTransitions(t);const c=n.find(a,t=>{if(t.id===e.transitionId)return true;if(t.name.toLowerCase()===e.transition.toLowerCase())return true});if(!c){console.log("Please specify transition name or transition id.");console.log("Possible transitions:");a.forEach(e=>{console.log(`{ id: ${e.id}, name: ${e.name} } transitions issue to '${e.to.name}' status.`)});return}console.log(`Selected transition:${JSON.stringify(c,null,4)}`);await this.Jira.transitionIssue(t,{transition:{id:c.id}});const u=await this.Jira.getIssue(t);console.log(`Changed ${t} status to : ${n.get(u,"fields.status.name")} .`);console.log(`Link to issue: ${this.config.baseUrl}/browse/${t}`);return{}}}},747:function(e){e.exports=require("fs")},775:function(module){module.exports=eval("require")("node-fetch")},835:function(e){e.exports=require("url")},837:function(e,t,s){const n=s(775);e.exports=(e=>async(e,t="unknown")=>{const s=await n(e.req.url,e.req);e.res={headers:s.headers.raw(),status:s.status};e.res.body=await s.text();const r=(s.headers.get("content-type")||"").includes("application/json");if(r&&e.res.body){e.res.body=JSON.parse(e.res.body)}if(!s.ok){throw new Error(s.statusText)}return e})}});